{ name: 'boomer',
  events: 
   { domain: null,
     _events: 
      { running: [Function],
        error: [Function],
        'slack-attachment': [Function],
        'slack.attachment': [Function] },
     _maxListeners: undefined },
  brain: 
   { data: { users: [Object], _private: {} },
     autoSave: false,
     saveInterval: 
      { _idleTimeout: 5000,
        _idlePrev: [Object],
        _idleNext: [Object],
        _idleStart: 181017071,
        _onTimeout: [Function: wrapper],
        _repeat: true },
     _events: { loaded: [Function], save: [Function], close: [Function] } },
  alias: false,
  adapter: 
   { customMessage: [Function],
     message: [Function],
     clientClose: [Function],
     open: [Function],
     userChange: [Function],
     brainLoaded: [Function],
     loggedIn: [Function],
     error: [Function],
     robot: [Circular],
     _events: {},
     options: 
      { token: 'xoxb-18849771972-2HsAgmrpfDuvamm9Sqa4Et0u',
        autoReconnect: true,
        autoMark: true,
        exitOnDisconnect: false },
     client: 
      { token: 'xoxb-18849771972-2HsAgmrpfDuvamm9Sqa4Et0u',
        autoReconnect: true,
        autoMark: true,
        _onSetStatus: [Function],
        _onSetActive: [Function],
        _onSetPresence: [Function],
        _onCreateGroup: [Function],
        _onOpenDM: [Function],
        _onJoinChannel: [Function],
        _onLogin: [Function],
        authenticated: true,
        connected: true,
        self: [Object],
        team: [Object],
        channels: [Object],
        dms: [Object],
        groups: {},
        users: [Object],
        bots: {},
        socketUrl: 'wss://ms366.slack-msgs.com/websocket/qRF4P9wIBvWwuYYyT-ii0iogqixLdZ6YnuHg-jrybURuWYF-sE6xZiX1yME76YfNsVQwXddby9C1k1YFRsBzuaKVaGkIkUnh_EleyPeseQisFZ5E49QY8BslJi4FY_lGAC0rjMtZLFuoVlRHRx31vw==',
        ws: [Object],
        _messageID: 7,
        _pending: {},
        _connAttempts: 0,
        logger: [Object],
        _events: [Object],
        _lastPong: 1453384538709,
        _pongTimeout: [Object] },
     self: 
      { _client: [Object],
        id: 'U0JQZNPUL',
        name: 'boomer',
        prefs: [Object],
        created: 1453210208,
        manual_presence: 'active' } },
  Response: [Function: Response],
  commands: 
   [ 'hubot ping - Reply with pong',
     'hubot adapter - Reply with the adapter',
     'hubot echo <text> - Reply back with <text>',
     'hubot time - Reply with current time',
     'hubot help - Displays all of the help commands that Hubot knows about.',
     'hubot help <query> - Displays all help commands that match <query>.',
     'hubot image me <query> - The Original. Queries Google Images for <query> and returns a random top result.',
     'hubot animate me <query> - The same thing as `image me`, except adds a few parameters to try to return an animated GIF instead.',
     'hubot mustache me <url|query> - Adds a mustache to the specified URL or query result.',
     'hubot translate me <phrase> - Searches for a translation for the <phrase> and then prints that bad boy out.',
     'hubot translate me from <source> into <target> <phrase> - Translates <phrase> from <source> into <target>. Both <source> and <target> are optional',
     'hubot pug me - Receive a pug',
     'hubot pug bomb N - get N pugs',
     'hubot map me <query> - Returns a map view of the area returned by `query`.',
     'hubot the rules - Make sure hubot still knows the rules.',
     'ship it - Display a motivation squirrel' ],
  listeners: 
   [ { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:mtr (.*)$)/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:trailer)/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:boom (.*)$)/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:who)/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:output)/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:robot)/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:PING$)/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:ADAPTER$)/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:ECHO (.*)$)/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:TIME$)/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:help(?:\s+(.*))?$)/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:(image|img)( me)? (.+))/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:animate( me)? (.+))/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:(?:mo?u)?sta(?:s|c)h(?:e|ify)?(?: me)? (.+))/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:translate(?: me)?(?: from (Afrikaans|Albanian|Arabic|Azerbaijani|Basque|Belarusian|Bengali|Bulgarian|Catalan|Croatian|Czech|Danish|Dutch|English|Esperanto|Estonian|Filipino|Finnish|French|Galician|Georgian|German|Greek|Gujarati|Haitian Creole|Hebrew|Hindi|Hungarian|Icelandic|Indonesian|Irish|Italian|Japanese|Kannada|Korean|Latin|Latvian|Lithuanian|Macedonian|Malay|Maltese|Norwegian|Persian|Polish|Portuguese|Romanian|Russian|Serbian|Simplified Chinese|Slovak|Slovenian|Spanish|Swahili|Swedish|Tamil|Telugu|Thai|Traditional Chinese|Turkish|Ukrainian|Urdu|Vietnamese|Welsh|Yiddish))?(?: (?:in)?to (Afrikaans|Albanian|Arabic|Azerbaijani|Basque|Belarusian|Bengali|Bulgarian|Catalan|Croatian|Czech|Danish|Dutch|English|Esperanto|Estonian|Filipino|Finnish|French|Galician|Georgian|German|Greek|Gujarati|Haitian Creole|Hebrew|Hindi|Hungarian|Icelandic|Indonesian|Irish|Italian|Japanese|Kannada|Korean|Latin|Latvian|Lithuanian|Macedonian|Malay|Maltese|Norwegian|Persian|Polish|Portuguese|Romanian|Russian|Serbian|Simplified Chinese|Slovak|Slovenian|Spanish|Swahili|Swedish|Tamil|Telugu|Thai|Traditional Chinese|Turkish|Ukrainian|Urdu|Vietnamese|Welsh|Yiddish))?(.*))/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:pug me)/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:pug bomb( (\d+))?)/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:how many pugs are there)/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:((driving|walking|bike|biking|bicycling) )?directions from (.+) to (.+))/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:(?:(satellite|terrain|hybrid)[- ])?map( me)? (.+))/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /^\s*[@]?boomer[:,]?\s*(?:(what are )?the (three |3 )?(rules|laws))/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] },
     { robot: [Circular],
       regex: /ship\s*it/i,
       options: [Object],
       callback: [Function],
       matcher: [Function] } ],
  middleware: 
   { listener: { robot: [Circular], stack: [] },
     response: { robot: [Circular], stack: [] },
     receive: { robot: [Circular], stack: [] } },
  logger: 
   { level: 6,
     stream: 
      { _connecting: false,
        _hadError: false,
        _handle: [Object],
        _parent: null,
        _host: null,
        _readableState: [Object],
        readable: false,
        domain: null,
        _events: [Object],
        _maxListeners: undefined,
        _writableState: [Object],
        writable: true,
        allowHalfOpen: false,
        destroyed: false,
        bytesRead: 0,
        _bytesDispatched: 590,
        _writev: null,
        _pendingData: null,
        _pendingEncoding: '',
        columns: 114,
        rows: 49,
        _type: 'tty',
        fd: 1,
        _isStdio: true,
        destroySoon: [Function],
        destroy: [Function] } },
  pingIntervalId: null,
  globalHttpOptions: {},
  version: '2.17.0',
  server: 
   { domain: null,
     _events: 
      { request: [Object],
        connection: [Function: connectionListener],
        clientError: [Function] },
     _maxListeners: undefined,
     _connections: 0,
     _handle: 
      { fd: 13,
        reading: false,
        owner: [Circular],
        onread: null,
        onconnection: [Function: onconnection],
        writeQueueSize: 0 },
     _usingSlaves: false,
     _slaves: [],
     allowHalfOpen: true,
     pauseOnConnect: false,
     httpAllowHalfOpen: false,
     timeout: 120000,
     _connectionKey: '4:0.0.0.0:8080' },
  router: 
   { [Function: app]
     use: [Function],
     handle: [Function],
     listen: [Function],
     domain: undefined,
     _events: { mount: [Function] },
     _maxListeners: undefined,
     setMaxListeners: [Function: setMaxListeners],
     emit: [Function: emit],
     addListener: [Function: addListener],
     on: [Function: addListener],
     once: [Function: once],
     removeListener: [Function: removeListener],
     removeAllListeners: [Function: removeAllListeners],
     listeners: [Function: listeners],
     route: '/',
     stack: 
      [ [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object],
        [Object] ],
     init: [Function],
     defaultConfiguration: [Function],
     engine: [Function],
     param: [Function],
     set: [Function],
     path: [Function],
     enabled: [Function],
     disabled: [Function],
     enable: [Function],
     disable: [Function],
     configure: [Function],
     checkout: [Function],
     connect: [Function],
     copy: [Function],
     delete: [Function],
     get: [Function],
     head: [Function],
     lock: [Function],
     'm-search': [Function],
     merge: [Function],
     mkactivity: [Function],
     mkcol: [Function],
     move: [Function],
     notify: [Function],
     options: [Function],
     patch: [Function],
     post: [Function],
     propfind: [Function],
     proppatch: [Function],
     purge: [Function],
     put: [Function],
     report: [Function],
     search: [Function],
     subscribe: [Function],
     trace: [Function],
     unlock: [Function],
     unsubscribe: [Function],
     all: [Function],
     del: [Function],
     render: [Function],
     request: { app: [Circular] },
     response: { app: [Circular] },
     cache: {},
     settings: 
      { 'x-powered-by': true,
        etag: 'weak',
        'etag fn': [Function: wetag],
        env: 'development',
        'subdomain offset': 2,
        'trust proxy': false,
        'trust proxy fn': [Function: trustNone],
        view: [Function: View],
        views: '/boomer/views',
        'jsonp callback name': 'callback',
        'json spaces': 2 },
     engines: {},
     _router: 
      { map: [Object],
        params: {},
        _params: [],
        caseSensitive: false,
        strict: false,
        middleware: [Function: router] },
     routes: { get: [Object] },
     router: [Getter],
     locals: { [Function: locals] settings: [Object] },
     _usedRouter: true },
  adapterName: 'slack',
  errorHandlers: [],
  onUncaughtException: [Function] }